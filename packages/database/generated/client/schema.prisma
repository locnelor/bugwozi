generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//********************* system
//账号类型
enum sys_account_provider {
  we_chat
  github
  qq
  email
  phone
  account
}

//系统角色
model sys_user {
  uid           String              @id @default(uuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  name          String
  roleId        String?
  account       String              @unique
  accounts      sys_account[]
  role          sys_role?           @relation(fields: [roleId], references: [uid])
  ban_menus     sys_user_ban_menu[]
  user_media    sys_user_media[]
  blog_posts    blog_posts[]
  blog_comments blog_comments[]
}

//系统账号
/**
 * 通过provider与value快速查询。
 * 但password需要单独设置。
 * 例如：${user_id}_account_${password}
 * we_chat_${openid}
 */
model sys_account {
  uid       String               @id @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
  provider  sys_account_provider
  value     String
  userId    String
  user      sys_user             @relation(fields: [userId], references: [uid])

  @@unique([provider, value])
  @@index([userId])
}

//菜单
model sys_menu {
  uid       String              @id @default(uuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
  name      String
  path      String              @unique
  sort      Int                 @default(10)
  powers    Int
  comment   String?             @db.Text
  parentId  String?
  parent    sys_menu?           @relation("SysMenuParent", fields: [parentId], references: [uid])
  children  sys_menu[]          @relation("SysMenuParent")
  roles     sys_menu_on_role[]
  user_bans sys_user_ban_menu[]
}

//用户黑名单
model sys_user_ban_menu {
  user   sys_user @relation(fields: [userId], references: [uid])
  menu   sys_menu @relation(fields: [menuId], references: [uid])
  userId String
  menuId String

  @@id([userId, menuId])
}

//角色菜单
model sys_menu_on_role {
  roleId String
  menuId String
  power  Int      @default(0)
  menu   sys_menu @relation(fields: [menuId], references: [uid])
  role   sys_role @relation(fields: [roleId], references: [uid])

  @@id([roleId, menuId])
}

//角色
model sys_role {
  uid       String             @id @default(uuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  name      String             @unique
  status    Boolean            @default(true)
  comment   String?            @db.LongText
  menus     sys_menu_on_role[]
  users     sys_user[]
  sort      Int                @default(10)
}

model sys_media {
  uid       String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  name      String // 文件名
  size      Int // 文件大小(字节)
  hash      String           @unique // 文件hash值
  mimeType  String // 文件MIME类型
  extension String // 文件扩展名
  path      String // 文件存储路径
  url       String? // 文件访问URL
  isWechat  Boolean          @default(false) // 是否为微信素材
  wechat_id String?          @unique // 微信素材ID
  enabled   Boolean          @default(true) // 是否可用
  type      String           @default("file") // 文件类型:file,image,video,audio等
  width     Int? // 图片/视频宽度
  height    Int? // 图片/视频高度
  duration  Int? // 音视频时长(秒)
  users     sys_user_media[]
}

model sys_user_media {
  user    sys_user  @relation(fields: [userId], references: [uid])
  media   sys_media @relation(fields: [mediaId], references: [uid])
  userId  String
  mediaId String

  @@id([userId, mediaId])
}

//*********************** 博客系统
// 博客分类
model blog_categories {
  uid       String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  name      String
  posts     blog_posts[]
}

// 博客文章
model blog_posts {
  uid          String               @id @default(uuid())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now()) @updatedAt
  title        String
  content      String               @db.Text
  status       Boolean              @default(true)
  userId       String
  categoriesId String?
  categories   blog_categories?     @relation(fields: [categoriesId], references: [uid])
  user         sys_user             @relation(fields: [userId], references: [uid])
  tags         blog_posts_on_tags[]
  comments     blog_comments[]
}

// 博客标签
model blog_posts_on_tags {
  postsId String
  tagId   String
  posts   blog_posts @relation(fields: [postsId], references: [uid])
  tag     blog_tag   @relation(fields: [tagId], references: [uid])

  @@id([postsId, tagId])
}

// 博客标签
model blog_tag {
  uid       String               @id @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
  name      String
  blogs     blog_posts_on_tags[]
}

// 博客评论
model blog_comments {
  uid       String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  content   String     @db.Text
  status    Boolean    @default(true)
  userId    String
  postId    String
  user      sys_user   @relation(fields: [userId], references: [uid])
  post      blog_posts @relation(fields: [postId], references: [uid])
}

// 友情链接
model blog_links {
  uid       String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String // 链接名称
  url       String // 链接地址
  logo      String? // logo地址
  sort      Int      @default(0) // 排序
  status    Boolean  @default(true)
}

// 公告
model blog_announcements {
  uid       String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  title     String // 公告标题
  content   String   @db.Text // 公告内容
  sort      Int      @default(0) // 排序
  status    Boolean  @default(true)
}

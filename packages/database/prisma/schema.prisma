generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//********************* system
//账号类型
enum sys_account_provider {
  we_chat
  github
  qq
  email
  phone
  account
}

//系统角色
model sys_user {
  uid              String              @id @default(uuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  name             String
  role_id          String?
  account          String              @unique
  accounts         sys_account[]
  ban_menus        sys_user_ban_menu[]
  user_media       sys_user_media[]
  blog_posts       blog_posts[]
  blog_comments    blog_comments[]
  bookkeep_records bookkeep_record[]
  orders           sys_order[]
  goods            sys_goods[]
  roles            sys_user_roles[]
}

//系统账号
/**
 * 通过provider与value快速查询。
 * 但password需要单独设置。
 * 例如：${user_id}_account_${password}
 * we_chat_${openid}
 */
model sys_account {
  uid       String               @id @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
  provider  sys_account_provider
  value     String
  user_id   String
  user      sys_user             @relation(fields: [user_id], references: [uid])

  @@unique([provider, value])
  @@index([user_id])
}

model sys_user_roles {
  uid       String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user_id   String
  role_id   String
  user      sys_user @relation(fields: [user_id], references: [uid])
  role      sys_role @relation(fields: [role_id], references: [uid])

  @@unique([user_id, role_id])
  @@index([role_id])
}

//菜单
model sys_menu {
  uid       String              @id @default(uuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
  name      String /// 菜单名称 
  path      String? /// 菜单路径
  sort      Int                 @default(10) /// 排序
  power     Int                 @default(0) /// 权限
  icon      String? /// 图标
  hidden    Boolean             @default(false) /// 是否隐藏
  type      String              @default("menu") /// 类型：menu、button、iframe、link
  link      String? /// 链接地址
  comment   String?             @db.Text /// 备注
  parent_id String?
  parent    sys_menu?           @relation("SysMenuParent", fields: [parent_id], references: [uid], onDelete: NoAction, onUpdate: NoAction)
  children  sys_menu[]          @relation("SysMenuParent")
  roles     sys_menu_on_role[]
  user_bans sys_user_ban_menu[]

  @@index([parent_id])
}

//用户黑名单
model sys_user_ban_menu {
  uid       String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      sys_user @relation(fields: [user_id], references: [uid])
  menu      sys_menu @relation(fields: [menu_id], references: [uid])
  user_id   String
  menu_id   String

  @@unique([user_id, menu_id])
  @@index([menu_id])
}

//角色菜单
model sys_menu_on_role {
  uid       String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role_id   String
  menu_id   String
  power     Int      @default(0)
  menu      sys_menu @relation(fields: [menu_id], references: [uid])
  role      sys_role @relation(fields: [role_id], references: [uid])

  @@unique([role_id, menu_id])
  @@index([menu_id])
}

model sys_role {
  uid       String             @id @default(uuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  name      String             @unique
  status    Boolean            @default(true)
  comment   String?            @db.LongText
  menus     sys_menu_on_role[]
  sort      Int                @default(10)
  users     sys_user_roles[]
}

model sys_media {
  uid              String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  name             String // 文件名
  size             Int // 文件大小(字节)
  hash             String            @unique // 文件hash值
  mimeType         String // 文件MIME类型
  extension        String // 文件扩展名
  path             String // 文件存储路径
  url              String? // 文件访问URL
  isWechat         Boolean           @default(false) // 是否为微信素材
  wechat_id        String?           @unique // 微信素材ID
  enabled          Boolean           @default(true) // 是否可用
  type             String            @default("file") // 文件类型:file,image,video,audio等
  width            Int? // 图片/视频宽度
  height           Int? // 图片/视频高度
  duration         Int? // 音视频时长(秒)
  users            sys_user_media[]
  bookkeep_records bookkeep_record[]
}

model sys_user_media {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  user      sys_user  @relation(fields: [user_id], references: [uid])
  media     sys_media @relation(fields: [media_id], references: [uid])
  user_id   String
  media_id  String

  @@unique([user_id, media_id])
  @@index([media_id])
}

enum order_trade_type {
  SYSTEM //系统生成
  NATIVE // 二维码
  JSAPI //公众号支付、小程序支付
  APP //APP支付
  MICROPAY //付款码支付
  MWEB //H5支付
  FACEPAY //刷脸支付
}

enum order_state {
  SUCCESS //支付成功
  REFUND //转入退款
  NOTPAY //未支付
  CLOSED //已关闭
  REVOKED //已撤销（仅付款码支付会返回）
  USERPAYING //用户支付中（仅付款码支付会返回）
  PAYERROR //支付失败（仅付款码支付会返回）
}

//系统订单
model sys_order {
  out_trade_no   String           @id
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  url            String?
  transaction_id String?          @unique //微信订单号
  amount         Int
  description    String
  payOpen_id     String? //支付人openid
  trade_type     order_trade_type // 支付方式
  state          order_state      @default(NOTPAY) //状态
  bank_type      String? //支付方式
  attach         String?

  user    sys_user? @relation(fields: [user_id], references: [uid])
  user_id String?

  goods    sys_goods @relation(fields: [goods_id], references: [uid])
  goods_id String

  @@index([user_id])
  @@index([goods_id])
}

/**
 * 商品，由用户创建。
 */
model sys_goods {
  uid         String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  user        sys_user    @relation(fields: [user_id], references: [uid])
  user_id     String
  key         String? /// 商品key
  amount      Int /// 金额
  description String /// 描述
  orders      sys_order[]

  @@index([user_id])
}

//*********************** 博客系统
// 博客分类
model blog_categories {
  uid         String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  name        String
  description String?
  posts       blog_posts[]
}

// 博客文章
model blog_posts {
  uid           String               @id @default(uuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now()) @updatedAt
  title         String
  content       String               @db.Text
  status        Boolean              @default(true)
  views         Int                  @default(0) // 浏览量
  likes         Int                  @default(0) // 点赞数
  user_id       String
  categories_id String?
  categories    blog_categories?     @relation(fields: [categories_id], references: [uid])
  user          sys_user             @relation(fields: [user_id], references: [uid])
  tags          blog_posts_on_tags[]
  comments      blog_comments[]

  @@index([user_id])
  @@index([categories_id])
}

// 博客标签
model blog_posts_on_tags {
  uid       String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  posts_id  String
  tag_id    String
  posts     blog_posts @relation(fields: [posts_id], references: [uid])
  tag       blog_tag   @relation(fields: [tag_id], references: [uid])

  @@unique([posts_id, tag_id])
  @@index([tag_id])
}

// 博客标签
model blog_tag {
  uid         String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now()) @updatedAt
  name        String               @unique
  description String? // 标签描述
  blogs       blog_posts_on_tags[]
}

// 博客评论
model blog_comments {
  uid       String          @id @default(uuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  content   String          @db.Text
  status    Boolean         @default(true)
  user_id   String
  post_id   String
  parent_id String? // 父评论ID，用于回复
  user      sys_user        @relation(fields: [user_id], references: [uid])
  post      blog_posts      @relation(fields: [post_id], references: [uid])
  parent    blog_comments?  @relation("CommentReplies", fields: [parent_id], references: [uid], onUpdate: NoAction, onDelete: NoAction)
  replies   blog_comments[] @relation("CommentReplies")

  @@index([user_id])
  @@index([post_id])
  @@index([parent_id])
}

// 友情链接
model blog_links {
  uid         String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String // 链接名称
  url         String // 链接地址
  logo        String? // logo地址
  description String? // 链接描述
  sort        Int      @default(0) // 排序
  status      Boolean  @default(true) // 是否显示
  clicks      Int      @default(0) // 点击次数
}

// 公告
model blog_announcements {
  uid       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  title     String // 公告标题
  content   String    @db.Text // 公告内容
  sort      Int       @default(0) // 排序
  status    Boolean   @default(true) // 是否显示
  startTime DateTime? // 开始时间
  endTime   DateTime? // 结束时间
  important Boolean   @default(false) // 是否重要
  author    String? // 作者
}

//*********************** 记账系统
// 记账类型
enum bookkeep_type {
  income
  expense
}

// 记账记录
model bookkeep_record {
  uid         String                    @id @default(uuid())
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @default(now()) @updatedAt
  type        bookkeep_type
  amount      Float
  category    String
  description String?                   @db.Text
  date        DateTime
  user_id     String
  user        sys_user                  @relation(fields: [user_id], references: [uid])
  media_id    String?
  media       sys_media?                @relation(fields: [media_id], references: [uid])
  tags        bookkeep_record_on_tags[]

  @@index([user_id])
  @@index([date])
  @@index([media_id])
}

// 记账标签
model bookkeep_tag {
  uid       String                    @id @default(uuid())
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @default(now()) @updatedAt
  name      String
  records   bookkeep_record_on_tags[]
}

// 记账记录标签关联
model bookkeep_record_on_tags {
  uid       String          @id @default(uuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  record_id String
  tag_id    String
  record    bookkeep_record @relation(fields: [record_id], references: [uid])
  tag       bookkeep_tag    @relation(fields: [tag_id], references: [uid])

  @@unique([record_id, tag_id])
  @@index([tag_id])
}
